import{createComponent as t,memo as e,spread as r,effect as a,setAttribute as n,delegateEvents as l,template as o}from"solid-js/web";import{createBrowserHistory as c}from"history";import{createContext as u,useContext as i,createSignal as f,onCleanup as s,createMemo as p,children as h,onMount as m,createEffect as d,splitProps as k}from"solid-js";import{parse as b}from"regexparam";const P=u(),y=()=>((t,e)=>{if(-1!==[null,void 0].indexOf(t))throw new Error(e);return t})(i(P),"Wrap your app in one instance of <Router>"),v=y,x=()=>v().location;function M(e){const r=e.history??c(),[a,n]=f(r.location.pathname),l=r.listen((({location:{pathname:t}})=>{n(t)}));s((()=>l()));const o=p((()=>({...r,pathname:a,setPathname:n})));return t(P.Provider,{get value(){return o()},get children(){return e.children}})}const R=u({}),g={},O=(t,e)=>void 0!==e&&(void 0===g[t]&&(g[t]=((t,e=!1)=>{const{keys:r,pattern:a}=b(t,!e);return t=>{const e=a.exec(t);if(!e)return!1;const n=r.reduce(((t,a,n)=>(t[r[n]]=e[n+1],t)),{});return[e[0]||"/",n]}})(t)),g[t](e));function j({fallback:r=null,onRoute:a=(()=>null),depsMemo:n=(()=>null),children:l}){const o=y(),c=i(R),u=p((()=>c?.route?c.route():null)),k=h((()=>l)),b=p((()=>(t=>Array.isArray(t)?t:[t])(k()))),P=(...t)=>{let e,r,a=b().map(((t,e)=>({i:e,...t}))).filter((t=>t._isRoute)).map((t=>(t=>{let e=u()&&!t.full&&void 0!==u()?.patternPrefix?u().patternPrefix:"";return{...t,pattern:e+t.path,parent:u()}})(t)));a.map((t=>{let a=((t,e=O)=>!(!t||!t.pattern)&&e(t.pattern,o.pathname()))(t),n={...t,match:a,matchParams:a?a[1]:t.fallbackParams,firstMatch:a&&!r};return n.firstMatch&&(r=n),!e&&t.fallback&&(e=n),n}));let n=r??e;if(!n)return null;let l=""+(u()?.patternPrefix??""),c=""+(u()?.linkPrefix??"");return n.match&&n.matchParams&&(n.match[0],l=""+(n.path??"")),{...n,patternPrefix:l,linkPrefix:c}},[v,x]=f(null,{equals:(t,e)=>{return e?.pattern===t?.pattern&&(r=e?.matchParams,a=t?.matchParams,JSON.stringify(r)===JSON.stringify(a));var r,a}}),[M,g]=f(!1,{equals:(t,e)=>t===e});m((()=>{g(!0)})),d((()=>{let t=P(b(),u(),o.pathname());M()&&x(t)})),s((()=>{g(!1)})),d((()=>{"function"==typeof a&&a({route:v(),parentRoute:u()})}));const j={route:v},w=({route:t,fallback:r=!1})=>{const a=p((()=>{if(t()){let{match:e,matchParams:r,others:a,depsMemo:l}=t();l&&l(),n&&n();let o=a.children;return r&&Object.keys(r).length&&"function"==typeof o?o(r):o}return r}));return e(a)};return t(R.Provider,{value:j,get children(){return t(w,{route:v,fallback:r??null})}})}const w=(t={path:"",depsMemo:()=>null,fallback:!1,fallbackParams:{},full:!1})=>{const[e,r]=k(t,["fallback","path","depsMemo","full","fallbackParams"]);return{_isRoute:!0,path:e.path,depsMemo:e.depsMemo,fallback:!!e.fallback,fallbackParams:e.fallbackParams,full:!!e.full,others:r}};function N({to:t="/"}){const e=v();return m((()=>e.push(t))),null}function q({to:e="",fallback:r=!1}){return t(w,{path:"/*",fallback:r,get children(){return t(N,{to:e})}})}const A=o("<a></a>",2);function J(t){const[e,l]=k(t,["href","hrefMemo","beforeRedirect","afterRedirect"]),{href:o,hrefMemo:c,beforeRedirect:u,afterRedirect:i}=e,f=v(),s=p((()=>(c?c():null)??o));return(()=>{const t=A.cloneNode(!0);return t.$$click=t=>{t.preventDefault(),u&&u({href:s(),e:t}),f.push(s()),i&&i({href:s(),e:t})},r(t,l,!1,!1),a((()=>n(t,"href",s()))),t})()}l(["click"]);export{q as DefaultRoute,J as Link,N as Navigate,w as Route,M as Router,j as Routes,v as useHistory,x as useLocation,y as useRouter};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
