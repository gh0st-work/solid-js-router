"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("solid-js/web"),t=require("history"),r=require("solid-js"),a=require("regexparam");const n=r.createContext(),o=()=>((e,t)=>{if(-1!==[null,void 0].indexOf(e))throw new Error(t);return e})(r.useContext(n),"Wrap your app in one instance of <Router>"),l=o;const c=r.createContext({}),u={},s=(e,t)=>void 0!==t&&(void 0===u[e]&&(u[e]=((e,t=!1)=>{const{keys:r,pattern:n}=a.parse(e,!t);return e=>{const t=n.exec(e);if(!t)return!1;const a=r.reduce(((e,a,n)=>(e[r[n]]=t[n+1],e)),{});return[t[0]||"/",a]}})(e)),u[e](t));const i=(e={path:"",depsMemo:()=>null,fallback:!1,fallbackParams:{},full:!1})=>{const[t,a]=r.splitProps(e,["fallback","path","depsMemo","full","fallbackParams"]);return{_isRoute:!0,path:t.path,depsMemo:t.depsMemo,fallback:!!t.fallback,fallbackParams:t.fallbackParams,full:!!t.full,others:a}};function p({to:e="/"}){const t=l();return r.onMount((()=>t.push(e))),null}const f=e.template("<a></a>",2);e.delegateEvents(["click"]),exports.DefaultRoute=function({to:t="",fallback:r=!1}){return e.createComponent(i,{path:"/*",fallback:r,get children(){return e.createComponent(p,{to:t})}})},exports.Link=function(t){const[a,n]=r.splitProps(t,["href","hrefMemo","beforeRedirect","afterRedirect"]),{href:o,hrefMemo:c,beforeRedirect:u,afterRedirect:s}=a,i=l(),p=r.createMemo((()=>(c?c():null)??o));return(()=>{const t=f.cloneNode(!0);return t.$$click=e=>{e.preventDefault(),u&&u({href:p(),e:e}),i.push(p()),s&&s({href:p(),e:e})},e.spread(t,n,!1,!1),e.effect((()=>e.setAttribute(t,"href",p()))),t})()},exports.Navigate=p,exports.Route=i,exports.Router=function(a){const o=a.history??t.createBrowserHistory(),[l,c]=r.createSignal(o.location.pathname),u=o.listen((({location:{pathname:e}})=>{c(e)}));r.onCleanup((()=>u()));const s=r.createMemo((()=>({...o,pathname:l,setPathname:c})));return e.createComponent(n.Provider,{get value(){return s()},get children(){return a.children}})},exports.Routes=function({fallback:t=null,onRoute:a=(()=>null),depsMemo:n=(()=>null),children:l}){const u=o(),i=r.useContext(c),p=r.createMemo((()=>i?.route?i.route():null)),f=r.children((()=>l)),m=r.createMemo((()=>(e=>Array.isArray(e)?e:[e])(f()))),h=(...e)=>{let t,r,a=m().map(((e,t)=>({i:t,...e}))).filter((e=>e._isRoute)).map((e=>(e=>{let t=p()&&!e.full&&void 0!==p()?.patternPrefix?p().patternPrefix:"";return{...e,pattern:t+e.path,parent:p()}})(e)));a.map((e=>{let a=((e,t=s)=>!(!e||!e.pattern)&&t(e.pattern,u.pathname()))(e),n={...e,match:a,matchParams:a?a[1]:e.fallbackParams,firstMatch:a&&!r};return n.firstMatch&&(r=n),!t&&e.fallback&&(t=n),n}));let n=r??t;if(!n)return null;let o=""+(p()?.patternPrefix??""),l=""+(p()?.linkPrefix??"");return n.match&&n.matchParams&&(n.match[0],o=""+(n.path??"")),{...n,patternPrefix:o,linkPrefix:l}},[d,x]=r.createSignal(null,{equals:(e,t)=>{return t?.pattern===e?.pattern&&(r=t?.matchParams,a=e?.matchParams,JSON.stringify(r)===JSON.stringify(a));var r,a}}),[k,P]=r.createSignal(!1,{equals:(e,t)=>e===t});r.onMount((()=>{P(!0)})),r.createEffect((()=>{let e=h(m(),p(),u.pathname());k()&&x(e)})),r.onCleanup((()=>{P(!1)})),r.createEffect((()=>{"function"==typeof a&&a({route:d(),parentRoute:p()})}));const b={route:d},M=({route:t,fallback:a=!1})=>{const o=r.createMemo((()=>{if(t()){let{match:e,matchParams:r,others:a,depsMemo:o}=t();o&&o(),n&&n();let l=a.children;return r&&Object.keys(r).length&&"function"==typeof l?l(r):l}return a}));return e.memo(o)};return e.createComponent(c.Provider,{value:b,get children(){return e.createComponent(M,{route:d,fallback:t??null})}})},exports.useHistory=l,exports.useLocation=()=>l().location,exports.useRouter=o;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
