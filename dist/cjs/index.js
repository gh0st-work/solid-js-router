"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("solid-js/web"),t=require("history"),r=require("solid-js"),a=require("regexparam");const n=r.createContext(),o=()=>((e,t)=>{if(-1!==[null,void 0].indexOf(e))throw new Error(t);return e})(r.useContext(n),"Wrap your app in one instance of <Router>"),l=o,c=r.createContext({}),s={},u=(e,t)=>void 0!==t&&(void 0===s[e]&&(s[e]=((e,t=!1)=>{const{keys:r,pattern:n}=a.parse(e,!t);return e=>{const t=n.exec(e);if(!t)return!1;const a=r.reduce(((e,a,n)=>(e[r[n]]=t[n+1],e)),{});return[t[0]||"/",a]}})(e)),s[e](t)),i=e=>{const[t,a]=r.splitProps(e,["fallback","path","depsMemo","full","fallbackParams"]);return{_isRoute:!0,path:t.path,depsMemo:t.depsMemo??(()=>null),fallback:!!t.fallback,fallbackParams:t.fallbackParams??{},full:!!t.full,others:a}},p=({to:e="/"})=>{const t=l();return r.onMount((()=>t.push(e))),null},f=e.template("<a></a>",2);e.delegateEvents(["click"]),exports.DefaultRoute=({to:t="",fallback:r=!1})=>e.createComponent(i,{path:"/*",fallback:r,get children(){return e.createComponent(p,{to:t})}}),exports.Link=t=>{const[a,n]=r.splitProps(t,["href","hrefMemo","beforeRedirect","afterRedirect"]),{href:o,hrefMemo:c,beforeRedirect:s,afterRedirect:u}=a,i=l(),p=r.createMemo((()=>(c?c():null)??o));return(()=>{const t=f.cloneNode(!0);return t.$$click=e=>{e.preventDefault(),s&&s({href:p(),e:e}),i.push(p()),s&&u({href:p(),e:e})},e.spread(t,n,!1,!1),e.effect((()=>e.setAttribute(t,"href",p()))),t})()},exports.Navigate=p,exports.Route=i,exports.Router=a=>{const o=a.history??t.createBrowserHistory(),[l,c]=r.createSignal(o.location.pathname),s=o.listen((({location:{pathname:e}})=>{c(e)}));r.onCleanup((()=>s()));const u=r.createMemo((()=>({...o,pathname:l,setPathname:c})));return e.createComponent(n.Provider,{get value(){return u()},get children(){return a.children}})},exports.Routes=({fallback:t=null,onRoute:a=(()=>null),depsMemo:n=(()=>null),children:l})=>{const s=o(),i=r.useContext(c),p=r.createMemo((()=>i?.route?i.route():null)),f=r.children((()=>l)),m=r.createMemo((()=>(e=>Array.isArray(e)?e:[e])(f()))),h=(...e)=>{let t,r,a=m().map(((e,t)=>({i:t,...e}))).filter((e=>e._isRoute)).map((e=>(e=>{let t=p()&&!e.full&&void 0!==p()?.patternPrefix?p().patternPrefix:"";return{...e,pattern:t+e.path,parent:p()}})(e))),n=a.map((e=>{let a=((e,t=u)=>!(!e||!e.pattern)&&t(e.pattern,s.pathname()))(e),n={...e,match:a,matchParams:a?a[1]:e.fallbackParams,firstMatch:a&&!r};return n.firstMatch&&(r=n),!t&&e.fallback&&(t=n),n}));console.log(n);let o=r??t;if(!o)return null;let l=""+(p()?.patternPrefix??""),c=""+(p()?.linkPrefix??"");return o.match&&o.matchParams&&(o.match[0],l=""+(o.path??"")),{...o,patternPrefix:l,linkPrefix:c}},[d,x]=r.createSignal(null),[P,k]=r.createSignal(!1);r.onMount((()=>{k(!0)})),r.createEffect((()=>{let e=h(m(),p(),s.pathname()),t=e?.pattern!==d()?.pattern||(r=e?.matchParams,a=d()?.matchParams,!(JSON.stringify(r)===JSON.stringify(a)));var r,a;P()&&t&&x(e)})),r.onCleanup((()=>{k(!1)})),r.createEffect((()=>{"function"==typeof a&&a({route:d(),parentRoute:p()})}));const b={route:d},M=({route:t,fallback:a=!1})=>{const o=r.createMemo((()=>{if(t()){let{match:e,matchParams:r,others:a,depsMemo:o}=t();o&&o(),n&&n();let l=a.children;return Object.keys(r).length&&"function"==typeof l?l(r):l}return a}));return e.memo(o)};return e.createComponent(c.Provider,{value:b,get children(){return e.createComponent(M,{route:d,fallback:t??null})}})},exports.useHistory=l,exports.useLocation=()=>l().location,exports.useRouter=o;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
